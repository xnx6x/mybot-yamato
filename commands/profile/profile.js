export default {
    name: 'profile',
    aliases: ['p', 'me', 'user'],
    description: 'View your complete profile with stats and information',
    usage: '/profile [@user]',
    category: 'profile',
    
    execute: async (sock, msg, args, { jid, senderJid, senderNum, db, memoryNames }) => {
        try {
            // Initialize user database
            await db.read();
            if (!db.data.users) db.data.users = [];
            if (!db.data.profiles) db.data.profiles = {};
            if (!db.data.economy) db.data.economy = {};
            if (!db.data.userGangs) db.data.userGangs = {};
            if (!db.data.gangs) db.data.gangs = {};

            // Determine target user
            let targetJid = senderJid;
            let targetNum = senderNum;
            
            if (args.length > 0 && msg.message.extendedTextMessage?.contextInfo?.mentionedJid?.length > 0) {
                targetJid = msg.message.extendedTextMessage.contextInfo.mentionedJid[0];
                targetNum = targetJid.split('@')[0];
            }

            const userName = memoryNames?.get(targetJid) || `User${targetNum.slice(-4)}`;
            const isOwnProfile = targetJid === senderJid;

            // Get or create user profile
            let userProfile = db.data.profiles[targetJid];
            if (!userProfile) {
                userProfile = {
                    created: Date.now(),
                    bio: '‚ú® New adventurer in the RPG world!',
                    age: null,
                    gender: null,
                    title: 'üî∞ Newcomer',
                    avatar: 'üë§',
                    status: 'active',
                    reputation: 0,
                    level: 1,
                    xp: 0,
                    lastActive: Date.now()
                };
                db.data.profiles[targetJid] = userProfile;
            }

            // Get economy data
            const userEconomy = db.data.economy[targetJid] || {
                wallet: 0,
                bank: 0,
                networth: 0
            };

            // Get gang info
            const userGang = db.data.userGangs[targetJid];
            const gangInfo = userGang ? db.data.gangs[userGang] : null;

            // Stylish text utilities
            const styleText = (text, style = 'normal') => {
                const styles = {
                    bold: t => `*${t}*`,
                    italic: t => `_${t}_`,
                    mono: t => `\`${t}\``,
                    fancy: t => {
                        const chars = {
                            'A': 'ùíú', 'B': 'ùêµ', 'C': 'ùíû', 'D': 'ùíü', 'E': 'ùê∏', 'F': 'ùêπ', 'G': 'ùí¢', 'H': 'ùêª',
                            'I': 'ùêº', 'J': 'ùí•', 'K': 'ùí¶', 'L': 'ùêø', 'M': 'ùëÄ', 'N': 'ùí©', 'O': 'ùí™', 'P': 'ùí´',
                            'Q': 'ùí¨', 'R': 'ùëÖ', 'S': 'ùíÆ', 'T': 'ùíØ', 'U': 'ùí∞', 'V': 'ùí±', 'W': 'ùí≤', 'X': 'ùí≥',
                            'Y': 'ùí¥', 'Z': 'ùíµ', 'a': 'ùí∂', 'b': 'ùí∑', 'c': 'ùí∏', 'd': 'ùíπ', 'e': 'ùëí', 'f': 'ùíª',
                            'g': 'ùëî', 'h': 'ùíΩ', 'i': 'ùíæ', 'j': 'ùíø', 'k': 'ùìÄ', 'l': 'ùìÅ', 'm': 'ùìÇ', 'n': 'ùìÉ',
                            'o': 'ùëú', 'p': 'ùìÖ', 'q': 'ùìÜ', 'r': 'ùìá', 's': 'ùìà', 't': 'ùìâ', 'u': 'ùìä', 'v': 'ùìã',
                            'w': 'ùìå', 'x': 'ùìç', 'y': 'ùìé', 'z': 'ùìè'
                        };
                        return t.split('').map(c => chars[c] || c).join('');
                    }
                };
                return styles[style] ? styles[style](text) : text;
            };

            const createBox = (content) => {
                const lines = content.split('\n');
                const maxWidth = Math.max(...lines.map(l => l.length)) + 4;
                const border = '‚îÄ'.repeat(maxWidth);
                
                return [
                    `‚îå${border}‚îê`,
                    ...lines.map(line => `‚îÇ ${line.padEnd(maxWidth - 2)} ‚îÇ`),
                    `‚îî${border}‚îò`
                ].join('\n');
            };

            // Calculate level progress
            const xpForNext = userProfile.level * 1000;
            const xpProgress = (userProfile.xp % 1000) / 10; // percentage
            const progressBar = '‚ñà'.repeat(Math.floor(xpProgress / 10)) + '‚ñë'.repeat(10 - Math.floor(xpProgress / 10));

            // Calculate total networth
            const totalNetworth = userEconomy.wallet + userEconomy.bank;

            // Format numbers
            const formatMoney = (amount) => {
                if (amount >= 1000000) return `${(amount / 1000000).toFixed(1)}M`;
                if (amount >= 1000) return `${(amount / 1000).toFixed(1)}K`;
                return amount.toString();
            };

            // Profile display
            const profileText = `${userProfile.avatar} ${styleText(userName, 'fancy')} ${userProfile.title}
${createBox(
    `${styleText('üìä PROFILE OVERVIEW', 'bold')}\n\n` +
    `${styleText('Bio:', 'bold')} ${userProfile.bio}\n` +
    `${userProfile.age ? `${styleText('Age:', 'bold')} ${userProfile.age} years\n` : ''}` +
    `${userProfile.gender ? `${styleText('Gender:', 'bold')} ${userProfile.gender}\n` : ''}` +
    `${styleText('Status:', 'bold')} ${userProfile.status === 'active' ? 'üü¢ Active' : 'üî¥ Away'}\n` +
    `${styleText('Reputation:', 'bold')} ${userProfile.reputation} ‚≠ê\n` +
    `${styleText('Joined:', 'bold')} ${new Date(userProfile.created).toLocaleDateString()}`
)}

${createBox(
    `${styleText('‚ö° LEVEL & EXPERIENCE', 'bold')}\n\n` +
    `${styleText('Level:', 'bold')} ${userProfile.level} üèÜ\n` +
    `${styleText('Experience:', 'bold')} ${userProfile.xp} XP\n` +
    `${styleText('Progress:', 'bold')} ${progressBar} ${Math.floor(xpProgress)}%\n` +
    `${styleText('Next Level:', 'bold')} ${xpForNext - (userProfile.xp % 1000)} XP needed`
)}

${createBox(
    `${styleText('üí∞ ECONOMY STATUS', 'bold')}\n\n` +
    `${styleText('Wallet:', 'bold')} $${formatMoney(userEconomy.wallet)} üíµ\n` +
    `${styleText('Bank:', 'bold')} $${formatMoney(userEconomy.bank)} üè¶\n` +
    `${styleText('Net Worth:', 'bold')} $${formatMoney(totalNetworth)} üíé\n` +
    `${styleText('Rank:', 'bold')} ${totalNetworth >= 1000000 ? 'üëë Millionaire' : 
                                    totalNetworth >= 100000 ? 'üíé Rich' : 
                                    totalNetworth >= 10000 ? 'üí∞ Wealthy' : 
                                    totalNetworth >= 1000 ? 'üíµ Middle Class' : 'ü•â Beginner'}`
)}

${gangInfo ? createBox(
    `${styleText('üõ°Ô∏è GANG INFORMATION', 'bold')}\n\n` +
    `${styleText('Gang:', 'bold')} ${styleText(gangInfo.name, 'fancy')}\n` +
    `${styleText('Role:', 'bold')} ${gangInfo.members[targetJid]?.role || 'Member'}\n` +
    `${styleText('Contribution:', 'bold')} ${gangInfo.members[targetJid]?.contribution || 0} points\n` +
    `${styleText('Members:', 'bold')} ${Object.keys(gangInfo.members).length}`
) : createBox(
    `${styleText('üõ°Ô∏è GANG STATUS', 'bold')}\n\n` +
    `${styleText('Status:', 'bold')} No gang affiliation\n` +
    `${styleText('Suggestion:', 'italic')} Join a gang to unlock features!`
)}

${styleText('üéÆ PROFILE ACTIONS:', 'bold')}
${isOwnProfile ? 
    `‚Ä¢ ${styleText('/edit', 'mono')} - Edit profile\n` +
    `‚Ä¢ ${styleText('/bio [text]', 'mono')} - Change bio\n` +
    `‚Ä¢ ${styleText('/title [title]', 'mono')} - Set title\n` +
    `‚Ä¢ ${styleText('/avatar', 'mono')} - Change avatar` :
    `‚Ä¢ ${styleText('/reputation @user', 'mono')} - Give reputation\n` +
    `‚Ä¢ ${styleText('/send @user [amount]', 'mono')} - Send money`
}

${styleText('üìà PROGRESS TIPS:', 'italic')}
‚Ä¢ Use commands to gain XP and level up
‚Ä¢ Complete daily tasks for bonus rewards
‚Ä¢ Join gangs for exclusive benefits
‚Ä¢ Build your economy through various activities

${styleText('üë§ Viewing:', 'bold')} ${isOwnProfile ? 'Your Profile' : `${userName}'s Profile`}`;

            await sock.sendMessage(jid, { text: profileText }, { quoted: msg });
            await db.write();

        } catch (error) {
            console.error('Profile command error:', error);
            await sock.sendMessage(jid, { 
                text: '‚ùå Profile temporarily unavailable. Please try again later!' 
            }, { quoted: msg });
        }
    }
};